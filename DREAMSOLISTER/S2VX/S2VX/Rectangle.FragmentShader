#version 330 core
out vec4 fragmentColor;
in vec2 normal;
uniform float fade;
uniform float feather;
uniform vec2 thickness;
uniform vec3 color;
void main() {
	float normalXLength = length(normal.x) * thickness.x;
	float normalYLength = length(normal.y) * thickness.y;
	float featherXPartial = thickness.x - feather;
	float featherYPartial = thickness.y - feather;
	float alpha = fade;
	if (normalXLength > featherXPartial) {
		float normalXPartial = normalXLength - featherXPartial;
		alpha = fade - normalXPartial / feather;
	}
	if (normalYLength > featherYPartial) {
		float normalYPartial = normalYLength - featherYPartial;
		float compare = fade - normalYPartial / feather;
		if (compare < alpha) {
			alpha = compare;
		}
	}
	fragmentColor = vec4(color.r, color.g, color.b, alpha);
}